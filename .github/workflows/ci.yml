name: CI

on:
  push:
    branches: [ master, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-15]
        rust: [stable, beta]
        exclude:
          # Reduce CI load by testing beta only on Ubuntu
          - os: windows-latest
            rust: beta
          - os: macos-15
            rust: beta

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.os }}-${{ matrix.rust }}

    # Linux dependencies
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake git libudev-dev pkg-config clang libclang-dev

    # Windows dependencies
    - name: Setup Windows dependencies
      if: matrix.os == 'windows-latest'
      run: |
        # Install CMake (should be available by default)
        cmake --version
        # Ensure Ninja is available
        ninja --version || choco install ninja
        # Install LLVM for bindgen
        choco install llvm
        echo "LIBCLANG_PATH=C:\Program Files\LLVM\bin" >> $env:GITHUB_ENV

    # macOS dependencies
    - name: Install macOS dependencies
      if: matrix.os == 'macos-15'
      run: |
        # Check if cmake is already available, if not install it
        if ! command -v cmake &> /dev/null; then
          echo "Installing cmake..."
          brew install cmake
        else
          echo "cmake is already available: $(cmake --version)"
        fi
        
        # Check if llvm is available, if not install it
        if ! brew list llvm &> /dev/null; then
          echo "Installing llvm..."
          brew install llvm
        else
          echo "llvm is already available"
        fi
        
        echo "LLVM_CONFIG_PATH=$(brew --prefix llvm)/bin/llvm-config" >> $GITHUB_ENV

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build library
      run: cargo build --verbose

    - name: Run tests
      run: cargo test --verbose --lib

    - name: Run documentation tests
      run: cargo test --doc

    - name: Build examples
      run: cargo build --examples

    - name: Check documentation
      run: cargo doc --no-deps --document-private-items

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    # Make coverage optional - can be disabled by setting this to false
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake git libudev-dev pkg-config clang libclang-dev

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov

    - name: Generate coverage report
      run: |
        cargo llvm-cov --all-features --workspace --cobertura --output-path cobertura.xml
        cargo llvm-cov --all-features --workspace --html --output-dir ./target/llvm-cov/html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: ./cobertura.xml
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
        verbose: true
      continue-on-error: true

    - name: Upload coverage reports as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          ./cobertura.xml
          ./target/llvm-cov/html/
      if: always()

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      uses: taiki-e/install-action@cargo-audit

    - name: Run security audit
      run: cargo audit

  msrv:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake git libudev-dev pkg-config clang libclang-dev

    - name: Install MSRV Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: "1.88.0"  # Adjust based on your MSRV

    - name: Check MSRV
      run: cargo check --all-features

  release:
    name: Release Build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    needs: [test, coverage, security, msrv]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake git libudev-dev pkg-config clang libclang-dev

    - name: Build release
      run: cargo build --release

    - name: Run release tests
      run: cargo test --release

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-build
        path: |
          target/release/libfreewili_finder_rs.rlib
          target/release/deps/
        retention-days: 30

  publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: [test, coverage, security, msrv]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake git libudev-dev pkg-config clang libclang-dev

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Verify version matches tag
      run: |
        CARGO_VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        echo "Cargo version: $CARGO_VERSION"
        echo "Tag version: $TAG_VERSION"
        if [ "$CARGO_VERSION" != "$TAG_VERSION" ]; then
          echo "Version mismatch: Cargo.toml version ($CARGO_VERSION) does not match tag version ($TAG_VERSION)"
          exit 1
        fi

    - name: Build release
      run: cargo build --release

    - name: Run tests
      run: cargo test --release

    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CRATES_TOKEN }}
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_TOKEN }}
